<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LiveChartsCore.SkiaSharpView</name>
    </assembly>
    <members>
        <member name="T:LiveChartsCore.SkiaSharpView.Axis">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianAxis" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.BoxSeries`1">
            <summary>
            Defines a box serries series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.BoxSeries`2">
            <summary>
            Defines a box series series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.BoxSeries`3">
            <summary>
            Defines a box serries series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.BoxSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.BoxSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`1">
            <summary>
            Defines a candlesticks series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`2">
            <summary>
            Defines a candlesticks series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3">
            <summary>
            Defines a candlesticks series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.CandlesticksSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ColumnSeries`1">
            <summary>
            Defines a column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ColumnSeries`2">
            <summary>
            Defines a column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3">
            <summary>
            Defines a column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ColumnSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.DateTimeAxis">
            <summary>
            Defines a DateTime axis.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.DateTimeAxis.#ctor(System.TimeSpan,System.Func{System.DateTime,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.DateTimeAxis"/> class.
            </summary>
            <param name="unit">The unit of the axis (hours, days, months, years).</param>
            <param name="formatter">The labels formatter.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ArcGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseArcGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ArcGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry">
            <summary>
            Defines a geometry that is built from a svg path.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry"/> class.
            </remarks>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.#ctor(SkiaSharp.SKPath)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry"/> class.
            </summary>
            <param name="sKPath"></param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.Path">
            <summary>
            The SVG path.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.FitToSize">
            <summary>
            Gets or sets whether the path should fit the size of the geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry.DrawPath(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPaint,SkiaSharp.SKPath)">
            <summary>
            Draws the given path to the canvas.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <param name="paint">The paint</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BoxGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseBoxGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BoxGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CandlestickGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseCandlestickGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CandlestickGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CircleGeometry">
            <summary>
            Defines a circle geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CircleGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry">
            <summary>
            Defines a rectangle geometry with a specified color.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry"/> class.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.Color">
            <summary>
                The <see cref="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.Color"/> motion property.
            </summary>
            <remarks>
                This property is used to animate the <see cref="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.Color"/> property.
            </remarks>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.ColorProperty">
            <summary>
               The <see cref="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.Color"/> property definition.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.PropertyDefinitions">
            <summary>
            Gets the <see cref="T:LiveChartsCore.Motion.PropertyDefinition"/> collection in the type.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.ColoredRectangleGeometry.GetPropertyDefinitions">
            <summary>
            Gets the motion property definitions in the instance.
            </summary>
            <returns>The propertt definitions.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CrossGeometry">
            <summary>
            Defines a cross geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CrossGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CrossGeometry"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CubicBezierAreaGeometry">
            <summary>
            Defines an area drawn using cubic beziers.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CubicBezierAreaGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CubicBezierAreaGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.CubicBezierAreaGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.DiamondGeometry">
            <summary>
            Defines a diamond geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.DiamondGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.DiamondGeometry"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.DoughnutGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseDoughnutGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.DoughnutGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeartGeometry">
            <summary>
            Defines a heart geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeartGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeartGeometry"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand">
            <summary>
            Defines a heat lane.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand"/> class.
            </summary>
            <param name="name">The name/</param>
            <param name="value">The value.</param>
        </member>
        <member name="E:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.PropertyChanged">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.Name">
            <summary>
            Gets or sets the land name.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.Value">
            <inheritdoc cref="P:LiveChartsCore.Geo.IWeigthedMapLand.Value"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.HeatLand.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changes.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseLabelGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry.Measure">
            <inheritdoc cref="M:LiveChartsCore.Drawing.DrawnGeometry.Measure" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LandAreaGeometry">
            <summary>
            Defines an area drawin using bezier segments.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LandAreaGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LandAreaGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LandAreaGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LineGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseLineGeometry" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LineGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.NeedleGeometry">
            <inheritdoc cref="T:LiveChartsCore.Drawing.BaseNeedleGeometry"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.NeedleGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.NeedleGeometry"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.NeedleGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.OvalGeometry">
            <summary>
            Defines an oval geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.OvalGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry">
            <summary>
            Defines a pop-up geometry.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.Wedge">
            <summary>
            Gets or sets the wedge size.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.WedgeThickness">
            <summary>
            Gets or sets the wedge thickness, it controls the width of the wedge,
            the value is normalized, where 1 means the <see cref="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.Wedge"/> size, default is 2.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.BorderRadius">
            <summary>
            Gets or sets the border radius.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.Placement">
            <summary>
            Gets or sets the placement.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.PopUpGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.RectangleGeometry">
            <summary>
            Defines a rectangle geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.RectangleGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.RoundedRectangleGeometry">
            <summary>
            Defines a rounded rectangle geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.RoundedRectangleGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.SizedGeometry">
            <summary>
            Defines a geometry with a size.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.SizedGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.SizedGeometry.OnDraw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPaint)">
            <summary>
            Legacy method, will be removed in future versions.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Geometry">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Geometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Geometry.OnDraw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPaint)">
            <summary>
            Legacy method, will be removed in future versions.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Geometry.Measure">
            <inheritdoc cref="M:LiveChartsCore.Drawing.DrawnGeometry.Measure" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Geometry.OnMeasure(LiveChartsCore.Painting.Paint)">
            <summary>
            Legacy method, will be removed in future versions.
            </summary>
            <param name="paintTasks"></param>
            <returns></returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StarGeometry">
            <summary>
            Defines a star geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StarGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StarGeometry"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StepLineAreaGeometry">
            <summary>
            Defines an area drawin using bezier segments.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StepLineAreaGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StepLineAreaGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.StepLineAreaGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Svg">
            <summary>
            Provides a set of methods to draw SVG paths.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.Svg.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPaint,SkiaSharp.SKPath,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws the given path to the canvas.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="paint">The paint.</param>
            <param name="path">The path.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coorindate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fitToSize">Indicates whether the path should fit the size of the geometry.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.SVGPathGeometry">
            <inheritdoc cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VariableSVGPathGeometry"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VariableSVGPathGeometry">
            <summary>
            Defines a geometry that is built from a svg path, the path can change at runtime,
            this geometry has a performance penalty, use it only when you need to change the path at runtime,
            if the geometry is static use any other geometry defined in the library, or inherit from
            <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.BaseSVGPathGeometry"/> class instead, and set the path in the constructor.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VariableSVGPathGeometry.SVGPath">
            <inheritdoc cref="P:LiveChartsCore.Drawing.IVariableSvgPath.SVGPath"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry">
            <summary>
            Defines an area geometry.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnOpen(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <summary>
            Called when the area begins the draw.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnClose(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <summary>
            Called to close the area.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.OnDrawSegment(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext,SkiaSharp.SKPath,LiveChartsCore.Drawing.Segments.Segment)">
            <summary>
            Called to draw the segment.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Geometries.VectorGeometry.Draw(LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.IDrawnElement`1.Draw(`0)" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.AbsoluteLayout">
            <inheritdoc cref="T:LiveChartsCore.Drawing.Layouts.CoreAbsoluteLayout`1"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.Container">
            <inheritdoc cref="T:LiveChartsCore.Drawing.Layouts.BaseContainer`2"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.Container`1">
            <inheritdoc cref="T:LiveChartsCore.Drawing.Layouts.BaseContainer`2"/>
             <summary>
             Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.Container`1"/> class.
             </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.StackLayout">
            <inheritdoc cref="T:LiveChartsCore.Drawing.Layouts.CoreStackLayout`1"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.TableLayout">
            <inheritdoc cref="T:LiveChartsCore.Drawing.Layouts.CoreTableLayout`1"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Layouts.TableLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Layouts.TableLayout"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.Layouts.TableLayout.AddChild(LiveChartsCore.Drawing.IDrawnElement{LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext},System.Int32,System.Int32,System.Nullable{LiveChartsCore.Drawing.Align},System.Nullable{LiveChartsCore.Drawing.Align})">
            <inheritdoc cref="M:LiveChartsCore.Drawing.Layouts.CoreTableLayout`1.AddChild(LiveChartsCore.Drawing.IDrawnElement{`0},System.Int32,System.Int32,System.Nullable{LiveChartsCore.Drawing.Align},System.Nullable{LiveChartsCore.Drawing.Align})"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext">
            <summary>
            Defines a skia sharp drawing context.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext"/> class.
            </remarks>
            <param name="motionCanvas">The motion canvas.</param>
            <param name="canvas">The canvas.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.#ctor(LiveChartsCore.Motion.CoreMotionCanvas,SkiaSharp.SKCanvas,SkiaSharp.SKColor)">
            <summary>
            Defines a skia sharp drawing context.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext"/> class.
            </remarks>
            <param name="motionCanvas">The motion canvas.</param>
            <param name="canvas">The canvas.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.MotionCanvas">
            <summary>
            Gets or sets the motion canvas.
            </summary>
            <value>
            The motion canvas.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.Canvas">
            <summary>
            Gets or sets the canvas.
            </summary>
            <value>
            The canvas.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.ActiveSkiaPaint">
            <summary>
            Gets or sets the paint.
            </summary>
            <value>
            The paint.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.Background">
            <summary>
            Gets or sets the background.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Drawing.SkiaSharpDrawingContext.LogOnCanvas(System.String)">
            <inheritdoc cref="M:LiveChartsCore.Drawing.DrawingContext.LogOnCanvas(System.String)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.DrawMarginFrame">
            <summary>
            Defines a visual frame in the draw margin of the chart.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1">
            <summary>
            Defines an item for a gauge series.
            </summary>
            <typeparam name="TSeries">The type of the series.</typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1.#ctor(LiveChartsCore.Defaults.ObservableValue,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1.Builder">
            <summary>
            Gets or sets the series builder.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1.IsFillSeriesBuilder">
            <summary>
            Gets a value indicating whether this instance is specific to the fill series.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Extensions.BaseGaugeItem`1.Background">
            <summary>
            Gets a constant value that represents the background series.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeGenerator">
            <summary>
            The gauge generator class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.GaugeGenerator.BuildSolidGauge(LiveChartsCore.SkiaSharpView.Extensions.GaugeItem[])">
            <summary>
            Builds a solid Gauge, it generates a series collectio of
            <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/>, these series
            are ready to be plotted in a pie chart, and will render the gauge, this reuses all the power and
            functionality of the <see cref="T:LiveChartsCore.PieChartEngine"/> class.
            </summary>
            <param name="items">The items.</param>
            <returns>A series collection of pie seires.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.GaugeGenerator.BuildAngularGaugeSections(LiveChartsCore.SkiaSharpView.Extensions.GaugeItem[])">
            <summary>
            Builds an angular Gauge, it generates a series collectio of
            <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/>, these series
            are ready to be plotted in a pie chart, and will render the gauge, this reuses all the power and
            functionality of the <see cref="T:LiveChartsCore.PieChartEngine"/> class.
            </summary>
            <param name="items">The items.</param>
            <returns>A series collection of pie seires.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem">
            <summary>
            Defines a gauge item.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem.#ctor(System.Double,System.Action{LiveChartsCore.SkiaSharpView.PieSeries{LiveChartsCore.Defaults.ObservableValue}})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem.#ctor(LiveChartsCore.Defaults.ObservableValue,System.Action{LiveChartsCore.SkiaSharpView.PieSeries{LiveChartsCore.Defaults.ObservableValue}})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeItem"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions">
            <summary>
            Defines the gauge options.
            </summary>
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions.None">
            <summary>
            Not a gauge.
            </summary>
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions.Solid">
            <summary>
            A solid gauge.
            </summary>
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions.Angular">
            <summary>
            An angular gauge.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Extensions.PieChartExtensions">
            <summary>
            Defines the pie chart esxtensions.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.PieChartExtensions.AsPieSeries``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,LiveChartsCore.SkiaSharpView.PieSeries{``0}},LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions)">
            <summary>
            Converts an IEnumerable to an ObservableCollection of pie series.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="source">The data source.</param>
            <param name="builder">An optional builder.</param>
            <param name="gaugeOptions">Defines whether the series are treated as gauge.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.PieChartExtensions.AsPieSeries``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,LiveChartsCore.SkiaSharpView.PieSeries{``0,``1}},LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions)">
            <summary>
            Converts an IEnumerable to an ObservableCollection of pie series.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TVisual">The type of the visual.</typeparam>
            <param name="source">The data source.</param>
            <param name="builder">An optional builder.</param>
            <param name="gaugeOptions">Defines whether the series are treated as gauge.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.PieChartExtensions.AsPieSeries``3(System.Collections.Generic.IEnumerable{``0},System.Action{``0,LiveChartsCore.SkiaSharpView.PieSeries{``0,``1,``2}},LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions)">
            <summary>
            Converts an IEnumerable to an ObservableCollection of pie series.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TVisual">The type of the visual.</typeparam>
            <typeparam name="TLabel">The type of the label.</typeparam>
            <param name="source">The data source.</param>
            <param name="builder">An optional builder.</param>
            <param name="gaugeOptions">Defines whether the series are treated as gauge.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Extensions.PieChartExtensions.AsPieSeries``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},LiveChartsCore.SkiaSharpView.Extensions.GaugeOptions)">
            <summary>
            Converts an IEnumerable to an ObservableCollection of pie series.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TSeries">The type of the series.</typeparam>
            <param name="source">The data source.</param>
            <param name="builder">An optional builder.</param>
            <param name="gaugeOptions">Defines whether the series are treated as gauge.</param>
            <returns></returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.HeatLandSeries">
            <inheritdoc cref="T:LiveChartsCore.CoreHeatLandSeries`1"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.HeatLandSeries`1">
            <inheritdoc cref="T:LiveChartsCore.CoreHeatLandSeries`1"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatLandSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatLandSeries`1"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatLandSeries`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatLandSeries`1"/> class.
            </summary>
            <param name="lands">The lands.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatLandSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatLandSeries`1"/> class.
            </summary>
            <param name="lands">The lands.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatLandSeries`1.#ctor(System.Collections.Generic.ICollection{`0},LiveChartsCore.Drawing.LvcColor[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatLandSeries`1"/> class.
            </summary>
            <param name="lands">The lands.</param>
            <param name="heatMap">The heat map.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.HeatSeries`1">
            <summary>
            Defines a heat series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.HeatSeries`2">
            <summary>
            Defines a heat series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.HeatSeries`3">
            <summary>
            Defines a heat series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.HeatSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.HeatSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LineSeries`1">
            <summary>
            Defines a line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LineSeries`2">
            <summary>
            Defines a line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LineSeries`3">
            <summary>
            Defines a line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LineSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp">
            <summary>
            Defines the default LiveCharts-SkiaSharp settings
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.UseDefaults(LiveChartsCore.Kernel.LiveChartsSettings)">
            <summary>
            Configures LiveCharts using the default settings for SkiaSharp.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.AddSkiaSharp(LiveChartsCore.Kernel.LiveChartsSettings)">
            <summary>
            Adds SkiaSharp as the library backend.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The current settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.HasGlobalSKTypeface(LiveChartsCore.Kernel.LiveChartsSettings,SkiaSharp.SKTypeface)">
            <summary>
            Registers a global SKTypeface instance to use on any <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint"/> that does not specify a typeface.
            </summary>
            <param name="settings">The current settings.</param>
            <param name="typeface">The typeface to load for text paints.</param>
            <returns>The current settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.HasTextSettings(LiveChartsCore.Kernel.LiveChartsSettings,LiveChartsCore.SkiaSharpView.TextSettings)">
            <summary>
            Registers the text settings to use for SkiaSharp.
            </summary>
            <param name="settings">The current settings.</param>
            <param name="textSettings">The text settings to use for SkiaSharp text rendering.</param>
            <returns>The current settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.HasRenderingFactory(LiveChartsCore.Kernel.LiveChartsSettings,LiveChartsCore.Motion.MotionCanvasComposer.MotionCanvasRenderingFactoryDelegate)">
            <summary>
            Adds a render mode to the available render modes.
            </summary>
            <param name="settings">The current settings.</param>
            <param name="factory">The rendering factory.</param>
            <returns>The current settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.AsSKColor(LiveChartsCore.Drawing.LvcColor,System.Nullable{System.Byte})">
            <summary>
            Converts a <see cref="T:LiveChartsCore.Drawing.LvcColor"/> to a <see cref="T:SkiaSharp.SKColor"/> instance.
            </summary>
            <param name="color">The color.</param>
            <param name="alphaOverrides">The alpha overrides.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.WithOpacity(LiveChartsCore.Drawing.LvcColor,System.Byte)">
            <summary>
            Creates a new color based on the 
            </summary>
            <param name="color">The color.</param>
            <param name="opacity">The opacity from 0 to 255.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.AsLvcColor(SkiaSharp.SKColor)">
            <summary>
            Converts a <see cref="T:SkiaSharp.SKColor"/> to a <see cref="T:LiveChartsCore.Drawing.LvcColor"/> intance.
            </summary>
            <param name="color">The color</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LiveChartsSkiaSharp.GetDistanceTo(LiveChartsCore.Kernel.ChartPoint,LiveChartsCore.Drawing.LvcPoint)">
            <summary>
            Calculates the distance in pixels from the target <see cref="T:LiveChartsCore.Kernel.ChartPoint"/> to the given location in the UI.
            </summary>
            <param name="target">The target.</param>
            <param name="location">The location.</param>
            <returns>The distance in pixels.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LogarithmicAxis">
            <summary>
            Defines a logarithmic axis.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LogarithmicAxis.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.LogaritmicAxis"/> class.
            </summary>
            <param name="base">The log base.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.LogaritmicAxis">
            <inheritdoc cref="T:LiveChartsCore.SkiaSharpView.LogarithmicAxis"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.LogaritmicAxis.#ctor(System.Double)">
            <inheritdoc cref="T:LiveChartsCore.SkiaSharpView.LogarithmicAxis"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.MapFactory">
            <summary>
            Defines a map builder.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.MapFactory.GenerateLands(LiveChartsCore.Geo.MapContext)">
            <inheritdoc cref="M:LiveChartsCore.Geo.IMapFactory.GenerateLands(LiveChartsCore.Geo.MapContext)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.MapFactory.ViewTo(LiveChartsCore.GeoMapChart,System.Object)">
            <inheritdoc cref="M:LiveChartsCore.Geo.IMapFactory.ViewTo(LiveChartsCore.GeoMapChart,System.Object)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.MapFactory.Pan(LiveChartsCore.GeoMapChart,LiveChartsCore.Drawing.LvcPoint)">
            <inheritdoc cref="M:LiveChartsCore.Geo.IMapFactory.Pan(LiveChartsCore.GeoMapChart,LiveChartsCore.Drawing.LvcPoint)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.MapFactory.Dispose">
            <summary>
            Disposes the map factory.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Motion.SKMatrixMotionProperty">
            <summary>
            Defines a motion property to handle the <see cref="T:SkiaSharp.SKMatrix"/> type.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.Motion.ColorMotionProperty"/> class.
            </remarks>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Motion.SKMatrixMotionProperty.#ctor(SkiaSharp.SKMatrix)">
            <summary>
            Defines a motion property to handle the <see cref="T:SkiaSharp.SKMatrix"/> type.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.Motion.ColorMotionProperty"/> class.
            </remarks>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Motion.SKMatrixMotionProperty.CanTransitionate">
            <inheritdoc cref="P:LiveChartsCore.Motion.MotionProperty`1.CanTransitionate"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Motion.SKMatrixMotionProperty.OnGetMovement(System.Single)">
            <inheritdoc cref="M:LiveChartsCore.Motion.MotionProperty`1.OnGetMovement(System.Single)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect">
            <summary>
            Creates a stroke dash effect.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect"/> class.
            </remarks>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect.#ctor(System.Single[],System.Single)">
            <summary>
            Creates a stroke dash effect.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect"/> class.
            </remarks>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect.Clone">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.Clone"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect.CreateEffect">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.CreateEffect"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.DashEffect.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect">
            <summary>
            A wrapper object for skia sharp path effects.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.#ctor(System.Object)">
            <summary>
            A wrapper object for skia sharp path effects.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.CreateEffect">
            <summary>
            Creates the path effect.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect)">
            <summary>
            Transitions the path effect to a new one.
            </summary>
            <param name="progress">The progress.</param>
            <param name="target">The end target.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect.AddDefaultEffect(System.Byte,LiveChartsCore.SkiaSharpView.Painting.Effects.PathEffect)">
            <summary>
            Adds a default filter.
            </summary>
            <param name="key">The key.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur">
            <summary>
            Creates a blur image filter.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur"/> class.
            </remarks>
            <param name="sigmaX">The sigma x.</param>
            <param name="sigmaY">The sigma y.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur.#ctor(System.Single,System.Single)">
            <summary>
            Creates a blur image filter.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur"/> class.
            </remarks>
            <param name="sigmaX">The sigma x.</param>
            <param name="sigmaY">The sigma y.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur.Clone">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Clone"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur.CreateFilter">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.CreateFilter"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.Blur.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow">
            <summary>
            Creates a drop shadow image filter.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow"/> class.
            </remarks>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <param name="sigmaX">The sigma x.</param>
            <param name="sigmaY">The sigma y.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow.#ctor(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKColor)">
            <summary>
            Creates a drop shadow image filter.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow"/> class.
            </remarks>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
            <param name="sigmaX">The sigma x.</param>
            <param name="sigmaY">The sigma y.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow.Clone">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Clone"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow.CreateFilter">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.CreateFilter"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.DropShadow.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter">
            <summary>
            A wrapper object for skia sharp image filters.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter"/> class.
            </remarks>
            <param name="key">The fiter type key.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.#ctor(System.Object)">
            <summary>
            A wrapper object for skia sharp image filters.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter"/> class.
            </remarks>
            <param name="key">The fiter type key.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.CreateFilter">
            <summary>
            Creates the image filter.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.AddDefaultFilter(System.Byte,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)">
            <summary>
            Adds a default filter.
            </summary>
            <param name="key">The key.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)">
            <summary>
            Transitions the image filter to a new one.
            </summary>
            <param name="progress">The transition progress.</param>
            <param name="target">The end target.</param>
            <returns>The image filter.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation">
            <summary>
            Merges multiple image filters.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation"/> class.
            </remarks>
            <param name="imageFilters">The image filters.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation.#ctor(LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter[])">
            <summary>
            Merges multiple image filters.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation"/> class.
            </remarks>
            <param name="imageFilters">The image filters.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation.Clone">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Clone"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation.CreateFilter">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.CreateFilter"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFiltersMergeOperation.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter.Transitionate(System.Single,LiveChartsCore.SkiaSharpView.Painting.ImageFilters.ImageFilter)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint">
            <summary>
            Defines a set of geometries that will be painted using a linear gradient shader.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint"/> class.
            </remarks>
            <param name="gradientStops">The gradient stops.</param>
            <param name="startPoint">
            The start point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
            <param name="endPoint">
            The end point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
            <param name="colorPos">
            An array of floats in the range of 0 to 1.
            These floats indicate the relative positions of the colors, you can set that argument to null to equally
            space the colors, default is null.
            </param>
            <param name="tileMode">
            The shader tile mode, default is <see cref="F:SkiaSharp.SKShaderTileMode.Clamp"/>.
            </param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.#ctor(SkiaSharp.SKColor[],SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single[],SkiaSharp.SKShaderTileMode)">
            <summary>
            Defines a set of geometries that will be painted using a linear gradient shader.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint" />
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint"/> class.
            </remarks>
            <param name="gradientStops">The gradient stops.</param>
            <param name="startPoint">
            The start point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
            <param name="endPoint">
            The end point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
            <param name="colorPos">
            An array of floats in the range of 0 to 1.
            These floats indicate the relative positions of the colors, you can set that argument to null to equally
            space the colors, default is null.
            </param>
            <param name="tileMode">
            The shader tile mode, default is <see cref="F:SkiaSharp.SKShaderTileMode.Clamp"/>.
            </param>
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.DefaultStartPoint">
            <summary>
            Default start point.
            </summary>
        </member>
        <member name="F:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.DefaultEndPoint">
            <summary>
            Default end point.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.#ctor(SkiaSharp.SKColor[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.#ctor(SkiaSharp.SKColor,SkiaSharp.SKColor,SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint"/> class.
            </summary>
            <param name="startColor">The start color.</param>
            <param name="endColor">The end color.</param>
            <param name="startPoint">
            The start point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
            <param name="endPoint">
            The end point, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end.
            </param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.#ctor(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.LinearGradientPaint.CloneTask">
            <inheritdoc cref="M:LiveChartsCore.Painting.Paint.CloneTask" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint">
            <summary>
            Defines a set of geometries that will be painted using a radial gradient shader.
            </summary>
            <seealso cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint.#ctor(SkiaSharp.SKColor[],System.Nullable{SkiaSharp.SKPoint},System.Single,System.Single[],SkiaSharp.SKShaderTileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="center">
            The center point of the gradient, both X and Y in the range of 0 to 1, where 0 is the start of the axis and 1 the end,
            default is (0.5, 0.5).
            </param>
            <param name="radius">
            The radius, in the range of 0 to 1, where 1 is the minimum of both Width and Height of the chart, default is 0.5.
            </param>
            <param name="colorPos">
            An array of integers in the range of 0 to 1.
            These integers indicate the relative positions of the colors, You can set that argument to null to equally
            space the colors, default is null.
            </param>
            <param name="tileMode">
            The shader tile mode, default is <see cref="F:SkiaSharp.SKShaderTileMode.Clamp"/>.
            </param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint.#ctor(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint"/> class.
            </summary>
            <param name="centerColor">Color of the center.</param>
            <param name="outerColor">Color of the outer.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.RadialGradientPaint.CloneTask">
            <inheritdoc cref="M:LiveChartsCore.Painting.Paint.CloneTask" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint"/> class.
            </summary>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="strokeMiter">The stroke miter.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint"/> class.
            </summary>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="strokeMiter">The stroke miter.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.FontBuilderDelegate">
            <summary>
            Represents a method that builds a <see cref="T:SkiaSharp.SKFont"/> from a <see cref="T:SkiaSharp.SKPaint"/>,
            a <see cref="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.SKTypeface"/>, and a size.
            </summary>
            <param name="paint">The paint instance that skia will use to draw the text.</param>
            <param name="typeface">The typefaced requested by the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint"/> instance or the
            <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry"/>.</param>
            <param name="size">The text size requested by the <see cref="T:LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry"/>.</param>
            <returns>A <see cref="T:SkiaSharp.SKFont"/> instance that will be used to draw and shape the label.</returns>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.SKFontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.SKTypeface">
            <summary>
            Gets or sets the SKTypeface.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.StrokeCap">
            <summary>
            Gets or sets the stroke cap.
            </summary>
            <value>
            The stroke cap.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.StrokeJoin">
            <summary>
            Gets or sets the stroke join.
            </summary>
            <value>
            The stroke join.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.PathEffect">
            <summary>
            Gets or sets the path effect.
            </summary>
            <value>
            The path effect.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.ImageFilter">
            <summary>
            Gets or sets the image filer.
            </summary>
            <value>
            The image filer.
            </value>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.ConfigureSkiaSharpFont(LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.FontBuilderDelegate)">
            <summary>
            Configures the SkiaSharp font manually.
            </summary>
            <param name="fontBuilder"></param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint">
            <summary>
            Defines a set of geometries that will be painted using a solid color.
            </summary>
            <seealso cref="T:LiveChartsCore.Painting.Paint" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.#ctor(SkiaSharp.SKColor)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.#ctor(SkiaSharp.SKColor,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="strokeWidth">Width of the stroke.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.CloneTask">
            <inheritdoc cref="M:LiveChartsCore.Painting.Paint.CloneTask" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>a string.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PieSeries`1">
            <summary>
            Defines a pie series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PieSeries`2">
            <summary>
            Defines a pie series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PieSeries`3">
            <summary>
            Defines a pie series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PieSeries`3.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PieSeries`3"/> class.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PolarAxis">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianAxis" />
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`1">
            <summary>
            Defines a polar line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`2">
            <summary>
            Defines a polar line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3">
            <summary>
            Defines a polar line series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.PolarLineSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.PolarLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.RectangularSection">
            <summary>
            Defines a rectangular section in a Cartesian chart.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.RowSeries`1">
            <summary>
            Defines a row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam> data label of every point.
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.RowSeries`2">
            <summary>
            Defines a row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.RowSeries`3">
            <summary>
            Defines a row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.RowSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.RowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ScatterSeries`1">
            <summary>
            Defines a scatter series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ScatterSeries`2">
            <summary>
            Defines a scatter series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3">
            <summary>
            Defines a scatter series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ScatterSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.ScatterSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart">
            <summary>
            A chart that is able to generate images or draw to a given canvas.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart"/> class.
            </remarks>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <summary>
            A chart that is able to generate images or draw to a given canvas.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart"/> class.
            </remarks>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.CoreCanvas">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.CoreCanvas"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.GetCoreChart">
            <summary>
            Gets the core chart.
            </summary>
            <returns>The chart.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.GetImage">
            <summary>
            Gets the current <see cref="T:SkiaSharp.SKSurface"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.SaveImage(System.IO.Stream,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <summary>
            Saves the image to the specified path.
            </summary>
            <param name="stream">The stream.</param>
            <param name="format">The format.</param>
            <param name="quality">The quality, an integer from 0 to 100.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.SaveImage(System.String,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <summary>
            Saves the image to the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="format">The format.</param>
            <param name="quality">The quality, an integer from 0 to 100.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.SaveImage(SkiaSharp.SKCanvas)">
            <summary>
            Draws the image to the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.DrawOnCanvas(SkiaSharp.SKCanvas)">
            <summary>
            Draws the chart to the specified canvas.
            </summary>
            <param name="canvas">The canvas.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKCartesianChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianChartView" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKCartesianChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKCartesianChart"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKCartesianChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKCartesianChart"/> class.
            </summary>
            <param name="chartView">The control to create the image from.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend">
            <summary>
            Defines the default legend for a chart.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.Easing">
            <summary>
            Gets or sets the easing function.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.AnimationsSpeed">
            <summary>
            Gets or sets the animations speed.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.Draw(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Draw(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.Measure(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Measure(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.Hide(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Hide(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.GetLayout(LiveChartsCore.Chart)">
            <summary>
            Gets the content of the legend.
            </summary>
            <param name="chart">The chart.</param>
            <returns>The content layout.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultLegend.Initialize(LiveChartsCore.Chart)">
            <summary>
            Called to initialize the tooltip.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip">
            <summary>
            Defines the default tooltip.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.Easing">
            <summary>
            Gets or sets the easing function.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.AnimationsSpeed">
            <summary>
            Gets or sets the animations speed.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.Wedge">
            <summary>
            Gets or sets the wedge.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.Show(System.Collections.Generic.IEnumerable{LiveChartsCore.Kernel.ChartPoint},LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartTooltip.Show(System.Collections.Generic.IEnumerable{LiveChartsCore.Kernel.ChartPoint},LiveChartsCore.Chart)" />
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.Hide(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartTooltip.Hide(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.GetLayout(System.Collections.Generic.IEnumerable{LiveChartsCore.Kernel.ChartPoint},LiveChartsCore.Chart)">
            <summary>
            Gets the content of the tooltip.
            </summary>
            <param name="foundPoints">The points to show.</param>
            <param name="chart">The chart.</param>
            <returns>The content layout.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKDefaultTooltip.Initialize(LiveChartsCore.Chart)">
            <summary>
            Called to initialize the tooltip.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap">
            <inheritdoc cref="T:LiveChartsCore.Geo.IGeoMapView"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.#ctor(LiveChartsCore.Geo.IGeoMapView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap"/> class.
            </summary>
            <param name="mapView">The map view.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.AutoUpdateEnabled">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.AutoUpdateEnabled" />
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.SyncContext">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.SyncContext" />
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.DesignerMode">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.DesignerMode" />
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.ActiveMap">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.ActiveMap"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.Canvas">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.Canvas"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.MapProjection">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.MapProjection"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.Stroke">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.Stroke"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.Fill">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.Fill"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.Series">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.Series"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.ViewCommand">
            <inheritdoc cref="P:LiveChartsCore.Geo.IGeoMapView.ViewCommand"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.DrawOnCanvas(SkiaSharp.SKCanvas)">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.DrawOnCanvas(SkiaSharp.SKCanvas)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKGeoMap.GetCoreChart">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.GetCoreChart"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend">
            <summary>
            Defines the heat legend for a chart.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.BadgePadding">
            <summary>
            Gets or sets the badge margin.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.BadgeWidth">
            <summary>
            Gets or sets the heat badge width, null for auto based on the text size.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Formatter">
            <summary>
            Gets or sets the legend labels formatter.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Easing">
            <summary>
            Gets or sets the easing function.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.AnimationsSpeed">
            <summary>
            Gets or sets the animations speed.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Draw(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Draw(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Measure(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Measure(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Hide(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartLegend.Hide(LiveChartsCore.Chart)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.GetLayout(LiveChartsCore.Chart)">
            <summary>
            Gets the content of the legend.
            </summary>
            <param name="chart">The chart.</param>
            <returns>The content layout.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKHeatLegend.Initialize(LiveChartsCore.Chart)">
            <summary>
            Called to initialize the tooltip.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPieChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPieChartView"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKPieChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPieChart"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKPieChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPieChart"/> class.
            </summary>
            <param name="chartView">The control to create the image from.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPolarChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPolarChartView"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKPolarChart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPolarChart"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SKCharts.SKPolarChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.SKCharts.SKPolarChart"/> class.
            </summary>
            <param name="chartView">The control to create the image from.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.SkiaSharpProvider">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Providers.ChartEngine"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SkiaSharpProvider.GetDefaultMapFactory">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Providers.ChartEngine.GetDefaultMapFactory"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SkiaSharpProvider.GetDefaultCartesianAxis">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Providers.ChartEngine.GetDefaultCartesianAxis"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SkiaSharpProvider.GetDefaultPolarAxis">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Providers.ChartEngine.GetDefaultPolarAxis"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SkiaSharpProvider.GetSolidColorPaint(LiveChartsCore.Drawing.LvcColor)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Providers.ChartEngine.GetSolidColorPaint(LiveChartsCore.Drawing.LvcColor)"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.SkiaSharpProvider.InitializeZoommingSection(LiveChartsCore.Motion.CoreMotionCanvas)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Providers.ChartEngine.InitializeZoommingSection(LiveChartsCore.Motion.CoreMotionCanvas)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`1">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`2">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`1">
            <summary>
            Defines a stacked column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`2">
            <summary>
            Defines a stacked column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3">
            <summary>
            Defines a stacked column series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedColumnSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`1">
            <summary>
            Defines a stacked row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`2">
            <summary>
            Defines a stacked row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3">
            <summary>
            Defines a stacked row series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedRowSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedRowSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`1">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`2">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3">
            <summary>
            Defines a stacked area series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StackedStepAreaSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StepLineSeries`1">
            <summary>
            Defines a stepline series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`1.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StepLineSeries`2">
            <summary>
            Defines a stepline series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`2.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3">
            <summary>
            Defines a stepline series in the user interface.
            </summary>
            <typeparam name="TModel">
            The type of the points, you can use any type, the library already knows how to handle the most common numeric types,
            to use a custom type, you must register the type globally 
            (<see cref="M:LiveChartsCore.Kernel.LiveChartsSettings.HasMap``1(System.Func{``0,System.Int32,LiveChartsCore.Kernel.Coordinate})"/>)
            or at the series level 
            (<see cref="P:LiveChartsCore.Series`3.Mapping"/>).
            </typeparam>
            <typeparam name="TVisual">
            The type of the geometry of every point of the series.
            </typeparam>
            <typeparam name="TLabel">
            The type of the data label of every point.
            </typeparam>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`3.#ctor(System.Collections.Generic.IReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.StepLineSeries`3.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.StepLineSeries`3"/> class,
            with a given collection of values.
            </summary>
            <param name="values">The values to plot.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TextSettings">
            <summary>
            Defines the text settings for SkiaSharp.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.TextSettings.DefaultTypeface">
            <summary>
            Defines a global typeface to use for text paints, this typeface will be used
            when the <see cref="P:LiveChartsCore.SkiaSharpView.Painting.SkiaPaint.SKTypeface"/> property is null (default is null).
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.TextSettings.FontBuilder">
            <summary>
            Defines a global action that configures a font before drawing with it, this action will be used
            to configure the font to draw with, by default edging is set to <see cref="F:SkiaSharp.SKFontEdging.SubpixelAntialias"/>
            and hinting is set to <see cref="F:SkiaSharp.SKFontHinting.Normal"/>.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.TextSettings.IsRTL">
            <summary>
            Determines whether the text is rendered in right-to-left mode.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.ThemesExtensions">
            <summary>
            Defines the light theme extensions.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ThemesExtensions.AddDefaultTheme(LiveChartsCore.Kernel.LiveChartsSettings,System.Action{LiveChartsCore.Themes.Theme},LiveChartsCore.Themes.LvcThemeKind)">
            <summary>
            Adds the default theme.
            </summary>
            <param name="settings">The settings.</param>
            <param name="requestedTheme">Indicates the theme kind.</param>
            <param name="themeSettings">The adittional theme settings.</param>
            <returns>The current LiveCharts settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ThemesExtensions.AddLightTheme(LiveChartsCore.Kernel.LiveChartsSettings,System.Action{LiveChartsCore.Themes.Theme})">
            <summary>
            Adds the light theme.
            </summary>
            <param name="settings">The settings.</param>
            /// <param name="themeSettings">The adittional theme settings.</param>
            <returns>The current LiveCharts settings.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.ThemesExtensions.AddDarkTheme(LiveChartsCore.Kernel.LiveChartsSettings,System.Action{LiveChartsCore.Themes.Theme})">
            <summary>
            Adds the dark theme.
            </summary>
            <param name="settings">The settings.</param>
            /// <param name="themeSettings">The adittional theme settings.</param>
            <returns>The current LiveCharts settings.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TimeSpanAxis">
            <summary>
            Defines a TimeSpan axis.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TimeSpanAxis.#ctor(System.TimeSpan,System.Func{System.TimeSpan,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.DateTimeAxis"/> class.
            </summary>
            <param name="unit">The unit of the axis (hours, days, months, years).</param>
            <param name="formatter">The labels formatter.</param>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorArrayTypeConverter">
            <summary>
            Converts a string to a an array of <see cref="T:LiveChartsCore.Drawing.LvcColor"/>.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>`
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorArrayTypeConverter.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.Drawing.LvcColor"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>`
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToLvcColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.HexToPaintTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.SkiaSharpView.Painting.SolidColorPaint"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToPaintTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.HexToPaintTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.MarginTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.Measure.Margin"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.MarginTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.MarginTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.MarginTypeConverter.ParseMargin(System.String)">
            <summary>
            Parses a string representation of margin values and returns a <see cref="T:LiveChartsCore.Measure.Margin"/> object.
            </summary>
            <remarks>The input string should contain one, two, or four numeric values separated by commas. These
            values represent the margin dimensions in the following order: <list type="bullet"> <item>One value: All sides
            of the margin are set to the same value.</item> <item>Two values: The first value sets the top and bottom
            margins, and the second value sets the left and right margins.</item> <item>Four values: The values set the top,
            right, bottom, and left margins, respectively.</item> </list> If the input string contains an invalid number of
            values, a default <see cref="T:LiveChartsCore.Measure.Margin"/> object is returned.</remarks>
            <param name="value">A comma-separated string containing one, two, or four numeric values representing margin dimensions.</param>
            <returns>A <see cref="T:LiveChartsCore.Measure.Margin"/> object initialized with the parsed values. If the input string is empty or does not
            contain a valid number of values, a default <see cref="T:LiveChartsCore.Measure.Margin"/> object is returned.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.PaddingTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.Drawing.Padding"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PaddingTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PaddingTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PaddingTypeConverter.ParsePadding(System.String)">
            <summary>
            Parses a string representation of padding values and returns a <see cref="T:LiveChartsCore.Drawing.Padding"/> object.
            </summary>
            <param name="value">A comma-separated string containing one, two, or four numeric values representing padding.</param>
            <returns>A <see cref="T:LiveChartsCore.Drawing.Padding"/> object initialized with the parsed values. If the input string contains: <list
            type="bullet"> <item>One value: All sides of the padding are set to the same value.</item> <item>Two values: The
            first value is applied to the top and bottom, and the second value to the left and right.</item> <item>Four
            values: The values are applied to the top, left, bottom, and right, respectively.</item> </list> If the input
            string is invalid or does not contain one, two, or four values, a default <see cref="T:LiveChartsCore.Drawing.Padding"/> object is
            returned.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.PointDTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.Drawing.LvcPointD"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PointDTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PointDTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.PointTypeConverter">
            <summary>
            Converts a string to a <see cref="T:LiveChartsCore.Drawing.LvcPoint"/> object.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PointTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PointTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.PointTypeConverter.ParsePoint(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.StringArrayTypeConverter">
            <summary>
            Converts a string to a an array of <see cref="T:LiveChartsCore.Drawing.LvcColor"/>.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.StringArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>`
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.StringArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.StringToDoubleArrayTypeConverter">
            <summary>
            Converts a string to a an array of double.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.StringToDoubleArrayTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>`
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.StringToDoubleArrayTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.TypeConverters.ValuesTypeConverter">
            <summary>
            Converts to a series values collection.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.ValuesTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceType">The source type.</param>
            <returns></returns>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.TypeConverters.ValuesTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.AngularTicksVisual">
            <summary>
            Defines the angulaar ticks visual.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual">
            <summary>
            Defines a label visual element.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual"/> class.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual.#ctor(LiveChartsCore.SkiaSharpView.Drawing.Geometries.LabelGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual"/> class.
            </summary>
            <param name="labelGeometry">The label.</param>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual.DrawnElement">
            <inheritdoc cref="P:LiveChartsCore.VisualElements.Visual.DrawnElement"/>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.VisualElements.DrawnLabelVisual.Measure(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.VisualElements.Visual.Measure(LiveChartsCore.Chart)"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.GeometryVisual`1">
            <inheritdoc cref="T:LiveChartsCore.VisualElements.GeometryVisual`2"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.LabelVisual">
            <inheritdoc cref="T:LiveChartsCore.VisualElements.BaseLabelVisual`1"/>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.VisualElements.LabelVisual.DefaultValues">
            <summary>
            The default values used for the Xaml generator.
            </summary>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.NeedleVisual">
            <inheritdoc cref="T:LiveChartsCore.VisualElements.BaseNeedleVisual`2"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.NeedleVisual`1">
            <inheritdoc cref="T:LiveChartsCore.VisualElements.BaseNeedleVisual`2"/>
        </member>
        <member name="T:LiveChartsCore.SkiaSharpView.VisualElements.SVGVisual">
            <summary>
            Defines a visual element in a chart that draws a svg geometry in the user interface.
            </summary>
        </member>
        <member name="P:LiveChartsCore.SkiaSharpView.VisualElements.SVGVisual.Path">
            <summary>
            Gets or sets the SVG path.
            </summary>
        </member>
        <member name="M:LiveChartsCore.SkiaSharpView.VisualElements.SVGVisual.OnInvalidated(LiveChartsCore.Chart)">
            <inheritdoc cref="M:LiveChartsCore.VisualElements.VisualElement.OnInvalidated(LiveChartsCore.Chart)"/>
        </member>
        <member name="T:LiveChartsGeneratedCode.SourceGenSKCartesianChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianChartView" />
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.ICartesianChartView" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.MatchAxesScreenDataRatio">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.MatchAxesScreenDataRatio" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.ScalePixelsToData(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ScalePixelsToData(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.ScaleDataToPixels(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ScaleDataToPixels(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.CreateCoreChart">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.CreateCoreChart"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.ConfigureObserver(LiveChartsCore.Kernel.Observers.ChartObserver)">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.ConfigureObserver(LiveChartsCore.Kernel.Observers.ChartObserver)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKCartesianChart.InitializeObservedProperties">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.InitializeObservedProperties"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.zoomMode">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ZoomMode"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.zoomingSpeed">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ZoomingSpeed"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.findingStrategy">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.FindingStrategy"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.xAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.XAxes"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.yAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.YAxes"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.sections">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.Sections"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKCartesianChart.drawMarginFrame">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.DrawMarginFrame"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.TooltipFindingStrategy">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.FindingStrategy" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.ZoomMode">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ZoomMode"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.ZoomingSpeed">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.ZoomingSpeed"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.FindingStrategy">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.FindingStrategy"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.XAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.XAxes"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.YAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.YAxes"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.Sections">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.Sections"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKCartesianChart.DrawMarginFrame">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.ICartesianChartView.DrawMarginFrame"/>
        </member>
        <member name="T:LiveChartsGeneratedCode.SourceGenSKChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IChartView" />
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <summary>
            Initializes a new instance of the <see cref="T:LiveChartsGeneratedCode.SourceGenSKChart"/> class.
            </summary>
            <param name="chartView">The chart view to generate the image from.</param>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.GetCoreChart">
            <inheritdoc cref="M:LiveChartsCore.SkiaSharpView.SKCharts.InMemorySkiaSharpChart.GetCoreChart"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.CoreChart">
            <summary>
            Gets the core chart.
            </summary>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.ForceGPU">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.ForceGPU" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.Tooltip">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Tooltip" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.Legend">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Legend" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.ChartTheme">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.ChartTheme" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.UpdaterThrottler">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.UpdaterThrottler" />
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.AutoUpdateEnabled">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.AutoUpdateEnabled" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.Measuring">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.Measuring" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.UpdateFinished">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.UpdateFinished" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.UpdateStarted">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.UpdateStarted" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.DataPointerDown">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.DataPointerDown" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.HoveredPointsChanged">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.HoveredPointsChanged" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.ChartPointPointerDown">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.ChartPointPointerDown" />
        </member>
        <member name="E:LiveChartsGeneratedCode.SourceGenSKChart.VisualElementsPointerDown">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.VisualElementsPointerDown"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.CreateCoreChart">
            <summary>
            Creates the core chart instance for rendering and manipulation.
            </summary>
            <remarks>This method is abstract and must be implemented by derived classes to provide     a specific
            chart type. The returned <see cref="T:LiveChartsCore.Chart"/> object represents the     foundational chart structure, which can
            be further customized or populated     with data.</remarks>
            <returns>A <see cref="T:LiveChartsCore.Chart"/> object that serves as the base chart instance.</returns>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.GetPointsAt(LiveChartsCore.Drawing.LvcPointD,LiveChartsCore.Measure.FindingStrategy,LiveChartsCore.Measure.FindPointFor)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartView.GetPointsAt(LiveChartsCore.Drawing.LvcPointD,LiveChartsCore.Measure.FindingStrategy,LiveChartsCore.Measure.FindPointFor)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.GetVisualsAt(LiveChartsCore.Drawing.LvcPointD)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IChartView.GetVisualsAt(LiveChartsCore.Drawing.LvcPointD)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.ConfigureObserver(LiveChartsCore.Kernel.Observers.ChartObserver)">
            <summary>
            Configures the observer properties.
            </summary>
            <param name="observe">The current observer.</param>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.InitializeObservedProperties">
            <summary>
            Initializes the observed properties.
            </summary>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.updateStartedCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.UpdateStarted"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.dataPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.DataPointerDown"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.hoveredPointsChangedCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.HoveredPointsChanged"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.chartPointPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.ChartPointPointerDown"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.visualElementsPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.VisualElementsPointerDown"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.pointerPressedCommand">
            <summary>
            Ocurrs when the chart is pressed.
            </summary>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.pointerMoveCommand">
            <summary>
            Ocurrs when the pointer is moved over the chart.
            </summary>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.pointerReleasedCommand">
            <summary>
            Ocurrs when the pointer is released over the chart.
            </summary>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.animationsSpeed">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.AnimationsSpeed"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.easingFunction">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.EasingFunction"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.drawMargin">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.DrawMargin"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.legendPosition">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendPosition"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.tooltipPosition">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipPosition"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.legendTextPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendTextPaint"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.legendBackgroundPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendBackgroundPaint"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.legendTextSize">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendTextSize"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.tooltipTextPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipTextPaint"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.tooltipBackgroundPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipBackgroundPaint"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.tooltipTextSize">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipTextSize"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.syncContext">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.SyncContext"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.title">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Title"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.visualElements">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.VisualElements"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKChart.series">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Series"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKChart.OnObservedPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when an observed property changes.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="oldValue">The old property value.</param>
            <param name="newValue">The new property value.</param>
            <returns></returns>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.UpdateStartedCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.UpdateStarted"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.DataPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.DataPointerDown"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.HoveredPointsChangedCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.HoveredPointsChanged"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.ChartPointPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.ChartPointPointerDown"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.VisualElementsPointerDownCommand">
            <inheritdoc cref="E:LiveChartsCore.Kernel.Sketches.IChartView.VisualElementsPointerDown"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.PointerPressedCommand">
            <summary>
            Ocurrs when the chart is pressed.
            </summary>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.PointerMoveCommand">
            <summary>
            Ocurrs when the pointer is moved over the chart.
            </summary>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.PointerReleasedCommand">
            <summary>
            Ocurrs when the pointer is released over the chart.
            </summary>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.AnimationsSpeed">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.AnimationsSpeed"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.EasingFunction">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.EasingFunction"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.DrawMargin">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.DrawMargin"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.LegendPosition">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendPosition"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.TooltipPosition">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipPosition"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.LegendTextPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendTextPaint"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.LegendBackgroundPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendBackgroundPaint"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.LegendTextSize">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.LegendTextSize"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.TooltipTextPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipTextPaint"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.TooltipBackgroundPaint">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipBackgroundPaint"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.TooltipTextSize">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.TooltipTextSize"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.SyncContext">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.SyncContext"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.Title">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Title"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.VisualElements">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.VisualElements"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKChart.Series">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IChartView.Series"/>
        </member>
        <member name="T:LiveChartsGeneratedCode.SourceGenSKPieChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPieChartView" />
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPieChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPieChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPieChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPieChart.CreateCoreChart">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.CreateCoreChart"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPieChart.InitializeObservedProperties">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.InitializeObservedProperties"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPieChart.isClockwise">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.IsClockwise"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPieChart.initialRotation">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.InitialRotation"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPieChart.maxAngle">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MaxAngle"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPieChart.maxValue">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MaxValue"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPieChart.minValue">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MinValue"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPieChart.IsClockwise">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.IsClockwise"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPieChart.InitialRotation">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.InitialRotation"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPieChart.MaxAngle">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MaxAngle"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPieChart.MaxValue">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MaxValue"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPieChart.MinValue">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPieChartView.MinValue"/>
        </member>
        <member name="T:LiveChartsGeneratedCode.SourceGenSKPolarChart">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPolarChartView" />
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPolarChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.#ctor(LiveChartsCore.Kernel.Sketches.IChartView)">
            <inheritdoc cref="T:LiveChartsCore.Kernel.Sketches.IPolarChartView" />
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.ScalePixelsToData(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IPolarChartView.ScalePixelsToData(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.ScaleDataToPixels(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)">
            <inheritdoc cref="M:LiveChartsCore.Kernel.Sketches.IPolarChartView.ScaleDataToPixels(LiveChartsCore.Drawing.LvcPointD,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.CreateCoreChart">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.CreateCoreChart"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.ConfigureObserver(LiveChartsCore.Kernel.Observers.ChartObserver)">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.ConfigureObserver(LiveChartsCore.Kernel.Observers.ChartObserver)"/>
        </member>
        <member name="M:LiveChartsGeneratedCode.SourceGenSKPolarChart.InitializeObservedProperties">
            <inheritdoc cref="M:LiveChartsGeneratedCode.SourceGenSKChart.InitializeObservedProperties"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.fitToBounds">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.FitToBounds"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.totalAngle">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.TotalAngle"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.innerRadius">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.InnerRadius"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.initialRotation">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.InitialRotation"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.angleAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.AngleAxes"/>
        </member>
        <member name="F:LiveChartsGeneratedCode.SourceGenSKPolarChart.radiusAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.RadiusAxes"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.FitToBounds">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.FitToBounds"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.TotalAngle">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.TotalAngle"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.InnerRadius">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.InnerRadius"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.InitialRotation">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.InitialRotation"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.AngleAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.AngleAxes"/>
        </member>
        <member name="P:LiveChartsGeneratedCode.SourceGenSKPolarChart.RadiusAxes">
            <inheritdoc cref="P:LiveChartsCore.Kernel.Sketches.IPolarChartView.RadiusAxes"/>
        </member>
    </members>
</doc>
